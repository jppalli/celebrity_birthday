"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[19411],{8403:(e,t,i)=>{i.d(t,{f:()=>k});var r=i(55491),s=i.n(r),n=i(42410),a=i(72761);class o{static fromResource(e){return new o(e.contextScenarioId,e.externalContextId,e.externalObjectId,e.ownerAppId)}toGraphSerializable(){return{contextScenarioId:this.contextScenarioId,externalContextId:this.externalContextId,externalObjectId:this.externalObjectId,ownerAppId:this.ownerAppId}}constructor(e,t,i,r){this.externalObjectId=i,this.externalContextId=t,this.contextScenarioId=e,this.ownerAppId=r}}class u{toGraphSerializable(){const e={};return this.external&&(e.external=this.external.toGraphSerializable()),e}constructor(e){null!=e.external&&(this.external=o.fromResource(e.external))}}var c=i(41740),l=i.n(c),d=i(91246);class p{build(){return new k(this)}newFromDifferentialUpdate(e){if(e.entityType!==a.I.Bucket)throw new Error("ArgumentException: invalid entity");const t=k.builder.withPropertyBag({id:e.id,itemVersion:e.itemVersion,planId:"",title:""}).build(),i=e.getCreateDiffData(),r=t.applyDiffs(i);return this.forClone(r)}forClone(e){var t;return this.withPropertyBag({id:e.id,itemVersion:e.itemVersion,title:e.title,planId:e.planId,orderHint:e.orderHint,creationSource:null!==(t=l()(e.creationSource))&&void 0!==t?t:new u({})})}fromWebResource(e){return this.withPropertyBag({id:e.Id,itemVersion:null!=e.ItemVersion?e.ItemVersion.toString():void 0,orderHint:e.OrderHint,planId:e.PlanId,title:e.Title,creationSource:e.creationSource?new u(e.creationSource):void 0})}fromGraphResource(e){return this.withPropertyBag({itemVersion:e["@odata.etag"],title:e.name,planId:e.planId||"",orderHint:e.orderHint,id:e.id,creationSource:e.creationSource?new u(e.creationSource):void 0})}withPropertyBag(e){return this.id=e.id,this.itemVersion=e.itemVersion||this.itemVersion,this.orderHint=e.orderHint||this.orderHint,this.planId=e.planId,this.title=e.title,this.creationSource=e.creationSource||this.creationSource,this}withLocallyUniqueId(){return this.id=d.o.generate(),this}getDiffDataFromWebResource(e,t){const i=new n.F;i.addMapping("Title","title"),i.addMapping("OrderHint","orderHint"),i.addMapping("PlanId","planId"),i.addMapping("creationSource","creationSource");const r={};return s()(e.Changes,e=>{const t=e.FieldName;switch(t){case"OrderHint":case"PlanId":case"Title":const s=i.getMappedClientKey(t);r[s]=i.translateValue(t,s,e.Value)}}),r}getDiffDataFromGraphResource(e,t){const i=new n.F;return i.addMapping("name","title"),i.addMapping("orderHint","orderHint"),i.addMapping("planId","planId"),i.addMapping("creationSource","creationSource"),i.translate(e)}withValidData(){return this.id=d.o.generate(),this.itemVersion="1",this.title="Test bucket",this.planId=d.o.generate(),this.orderHint=" !",this}constructor(){this.id=d.o.generate(),this.title="",this.planId=d.o.generate(),this.itemVersion="",this.orderHint=" !",this.creationSource=new u({})}}var h=i(88908),P=i(17002),R=i.n(P),q=i(54320),A=i.n(q),S=i(36777),v=i.n(S),y=i(679);class k extends h.W{static get builder(){return new p}get entityType(){return a.I.Bucket}toWebSerializable(){return{Id:this.id,ItemVersion:null!=this.itemVersion?parseInt(this.itemVersion,10):null,OrderHint:this.orderHint,PlanId:this.planId,Title:this.title,creationSource:this.creationSource.toGraphSerializable()}}toGraphSerializable(){const e=this.creationSource.toGraphSerializable();return{id:this.id,"@odata.etag":this.itemVersion,orderHint:this.orderHint,planId:this.planId,name:this.title,creationSource:A()(e)?void 0:e}}setProperty(e,t){if("id"===e||"itemVersion"===e||"planId"===e||"creationSource"===e)throw new Error("ReadOnlyException: "+e);const i=this.getClone();return i[e]=t,i}getDiff(e){return y.B.getDiff(this,e,y.B.getDiffMomentCustomizer)}applyDiffs(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];if(!R()(t,e=>null!=e))throw new Error("ArgumentException: diffs - Diffs array contains null elements");return t.length>0?v()(k.builder.build(),this,...t,y.B.applyDiffMomentCustomizer):this}applyDifferentialUpdate(e){if(e.id!==this.id)throw new Error("ArgumentException: update.id must match this.id");const t=e.getUpdateDiffData(this);return this.applyDiffs(t)}getClone(){return this.getCloneBuilder().build()}getCloneBuilder(){return k.builder.forClone(this)}constructor(e){super(e.id,e.itemVersion),this.orderHint=e.orderHint,this.planId=e.planId,this.title=e.title,this.creationSource=e.creationSource}}k.TitleMaxLength=256},9575:(e,t,i)=>{i.d(t,{z:()=>n});var r=i(38921),s=i(68552);class n extends s.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for UpdateRequest")}constructor(e,t,i,r,n){super(e,t,i,r,s.Y.Update,n)}}},13892:(e,t,i)=>{i.r(t),i.d(t,{GatedTaskServiceApi:()=>j});var r=i(39287);class s extends r.k{updateRequestParams(e,t){this.requestParams.taskId=t,this.entityId=s.RequestPrefix+t}constructor(e,t,i,r,n){super(s.RequestPrefix+e,t,i,r,n)}}s.RequestPrefix="GET_TASK_ENTITY_SET";var n=i(43649);class a extends n.b{updateRequestParams(e,t){this.requestParams.bucketId=t,this.entityId=a.RequestPrefix+t}constructor(e,t,i,r,s){super(a.RequestPrefix+e,t,i,r,s)}}a.RequestPrefix="DELETE_BUCKET";class o extends n.b{updateRequestParams(e,t){this.requestParams.planId=t,this.entityId=o.RequestPrefix+t}constructor(e,t,i,r,s){super(o.RequestPrefix+e,t,i,r,s)}}o.RequestPrefix="DELETE_PLAN";class u extends n.b{updateRequestParams(e,t){this.requestParams.groupId=t,this.entityId=u.RequestPrefix+t}constructor(e,t,i,r,s){super(u.RequestPrefix+e,t,i,r,s)}}u.RequestPrefix="DELETE_GROUP";class c extends n.b{updateRequestParams(e,t){this.requestParams.taskId=t,this.entityId=c.RequestPrefix+t}constructor(e,t,i,r,s){super(c.RequestPrefix+e,t,i,r,s)}}c.RequestPrefix="DELETE_TASK";var l=i(88636);class d extends l.E{extractNewEntityId(e){return e.id}constructor(e,t,i,r,s){super(d.RequestPrefix+e,t,i,r,s)}}d.RequestPrefix="CREATE_GROUP";var p=i(92970),h=i(87596);class P extends h.x{updateRequestParams(e,t){this.entityId=P.RequestPrefix+t;const i=this.requestParams.originalGroup.toWebSerializable();i.Id=t,this.requestParams.originalGroup=p.E.builder.fromUnifiedGroupResource(i).build();const r=this.requestParams.updatedGroup.toWebSerializable();r.Id=t,this.requestParams.updatedGroup=p.E.builder.fromUnifiedGroupResource(r).build()}constructor(e,t,i,r,s){super(P.RequestPrefix+e,t,i,r,s)}}P.RequestPrefix="UPDATE_UNIFIED_GROUP";class R extends h.x{updateRequestParams(e,t){this.entityId=R.RequestPrefix+t,this.requestParams.groupId=t}constructor(e,t,i,r,s){super(R.RequestPrefix+e,t,i,r,s)}}R.RequestPrefix="UPDATE_GROUP_FAVORITE";class q extends h.x{updateRequestParams(e,t){this.entityId=q.RequestPrefix+t,this.requestParams.groupId=t}constructor(e,t,i,r,s){super(q.RequestPrefix+e,t,i,r,s)}}q.RequestPrefix="UPDATE_GROUP_SUBSCRIPTION";class A extends h.x{updateRequestParams(e,t){this.entityId=A.RequestPrefix+t,this.requestParams.groupId=t}constructor(e,t,i,r,s){super(A.RequestPrefix+e,t,i,r,s)}}A.RequestPrefix="JOIN_GROUP";class S extends h.x{updateRequestParams(e,t){this.entityId=S.RequestPrefix+t,this.requestParams.groupId=t}constructor(e,t,i,r,s){super(S.RequestPrefix+e,t,i,r,s)}}S.RequestPrefix="LEAVE_GROUP";class v extends l.E{extractNewEntityId(e){return e.plan.id}constructor(e,t,i,r,s){super(v.RequestPrefix+e,t,i,r,s)}}v.RequestPrefix="CREATE_PLAN";var y=i(40468);class k extends h.x{updateRequestParams(e,t){this.entityId=k.RequestPrefix+t;const i=this.requestParams.originalPlanEntitySet.toWebSerializable(),r=this.requestParams.updatedPlanEntitySet.toWebSerializable();null!=i.Plan&&(i.Plan.Id=t),null!=r.Plan&&(r.Plan.Id=t),null!=i.Details&&(i.Details.Id=t),null!=r.Details&&(r.Details.Id=t),this.requestParams.originalPlanEntitySet=y.T.builder.fromPlanEntityGroupResource(i).build(),this.requestParams.updatedPlanEntitySet=y.T.builder.fromPlanEntityGroupResource(r).build()}constructor(e,t,i,r,s){super(k.RequestPrefix+e,t,i,r,s)}}k.RequestPrefix="UPDATE_PLAN";class m extends h.x{updateRequestParams(e,t){this.entityId=m.RequestPrefix+t,this.requestParams.planId=t}constructor(e,t,i,r,s){super(m.RequestPrefix+e,t,i,r,s)}}m.RequestPrefix="COPY_PLAN";class E extends l.E{extractNewEntityId(e){return e.id}constructor(e,t,i,r,s){super(E.RequestPrefix+e,t,i,r,s)}}E.RequestPrefix="CREATE_BUCKET";var I=i(8403);class T extends h.x{updateRequestParams(e,t){this.entityId=T.RequestPrefix+t;const i=this.requestParams.originalBucket.toWebSerializable();i.Id=t,this.requestParams.originalBucket=I.f.builder.fromWebResource(i).build();const r=this.requestParams.updatedBucket.toWebSerializable();r.Id=t,this.requestParams.updatedBucket=I.f.builder.fromWebResource(r).build()}constructor(e,t,i,r,s){super(T.RequestPrefix+e,t,i,r,s)}}T.RequestPrefix="UPDATE_BUCKET";var w=i(80708);class f extends l.E{extractNewEntityId(e){return e.id}updateRequestParams(e,t){0!==e.indexOf(E.RequestPrefix)?0!==e.indexOf(v.RequestPrefix)?super.updateRequestParams(e,t):this.updatePlanIdOnRequestParameters(t):this.updateBucketIdOnRequestParameters(t)}updatePlanIdOnRequestParameters(e){const{newTaskEntitySet:t}=this.requestParams;this.requestParams.newTaskEntitySet=w.F.builder.withTask(t.task.setProperty("planId",e)).withDetails(t.taskDetails).withFormatData(t.taskFormatData).build()}updateBucketIdOnRequestParameters(e){const{newTaskEntitySet:t}=this.requestParams;this.requestParams.newTaskEntitySet=w.F.builder.withTask(t.task.setProperty("bucketId",e)).withDetails(t.taskDetails).withFormatData(t.taskFormatData).build()}constructor(e,t,i,r,s){super(f.RequestPrefix+e,t,i,r,s)}}f.RequestPrefix="CREATE_TASK";class x extends h.x{updateRequestParams(e,t){if(0===e.indexOf(E.RequestPrefix))return void this.updateBucketIdOnRequestParameters(t);if(0===e.indexOf(v.RequestPrefix))return void this.updatePlanIdOnRequestParameters(t);this.entityId=x.RequestPrefix+t;const i=this.requestParams.originalTaskEntitySet,r=this.requestParams.updatedTaskEntitySet;this.requestParams.originalTaskEntitySet=w.F.builder.forClone(i).withId(t).build(),this.requestParams.updatedTaskEntitySet=w.F.builder.forClone(r).withId(t).build()}updatePlanIdOnRequestParameters(e){const{updatedTaskEntitySet:t}=this.requestParams;null!=t.task&&(this.requestParams.updatedTaskEntitySet=w.F.builder.withTask(t.task.setProperty("planId",e)).withDetails(t.taskDetails).withFormatData(t.taskFormatData).build())}updateBucketIdOnRequestParameters(e){const{updatedTaskEntitySet:t}=this.requestParams;null!=t.task&&(this.requestParams.updatedTaskEntitySet=w.F.builder.withTask(t.task.setProperty("bucketId",e)).withDetails(t.taskDetails).withFormatData(t.taskFormatData).build())}constructor(e,t,i,r,s){super(x.RequestPrefix+e,t,i,r,s)}}x.RequestPrefix="UPDATE_TASK";var b=i(94078);class g extends h.x{updateRequestParams(e,t){this.entityId=g.RequestPrefix+t;const i=this.requestParams.originalUserDetails.toWebSerializable();i.Id=t,this.requestParams.originalUserDetails=b.I.builder.fromWebResource(i).build();const r=this.requestParams.updatedUserDetails.toWebSerializable();r.Id=t,this.requestParams.updatedUserDetails=b.I.builder.fromWebResource(r).build()}constructor(e,t,i,r,s){super(g.RequestPrefix+e,t,i,r,s)}}g.RequestPrefix="UPDATE_USER_DETAILS";class _ extends h.x{updateRequestParams(e,t){this.requestParams.taskId=t,this.entityId=_.RequestPrefix+t}constructor(e,t,i,r,s){super(_.RequestPrefix+e,t,i,r,s)}}_.RequestPrefix="UNDELETE_TASK";var C=i(18113);class G extends l.E{extractNewEntityId(e){return e.externalId}constructor(e,t,i,r,s){let{resolve:n,reject:a}=r;super(G.RequestPrefix+e,t,i,{resolve:n,reject:a},s)}}G.RequestPrefix="CREATE_PLANNER_ROSTER";var D=i(19853),U=i.n(D),N=i(98502),O=i(91246);class j{getAugmentationLoopToken(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((e,t)=>{const s=new r.k("GET_AUGMENTATIONLOOP_TOKEN",this.taskServiceApi.getAugmentationLoopToken.bind(this.taskServiceApi),{},{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(s,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getUnifiedGroupSensitivityLabelAsync(e,t,i,s){const n=null==s?C.Q.Priority1:s;return new Promise((s,a)=>{const o=new r.k("GET_UNIFIED_GROUP_SENSITIVITY_LABEL"+e.groupId,this.taskServiceApi.getUnifiedGroupSensitivityLabelAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getRosterContainerAsync(e,t,i,s){const n=null==s?C.Q.Priority1:s;return new Promise((s,a)=>{const o=new r.k("GET_ROSTER_CONTAINER"+e.containerId,this.taskServiceApi.getRosterContainerAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getUnifiedGroupDetailsAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_UNIFIED_GROUP_DETAILS"+e.groupId,this.taskServiceApi.getUnifiedGroupDetailsAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getJoinedGroupsAsync(e,t){const i=null==t?C.Q.Priority5:t;return new Promise((t,s)=>{const n=new r.k("GET_JOINED_GROUPS",this.taskServiceApi.getJoinedGroupsAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getFavoritePlansForUserAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_FAVORITE_PLANS_FOR_USER",this.taskServiceApi.getFavoritePlansForUserAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getRecentPlansForUserAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_RECENT_PLANS_FOR_USER",this.taskServiceApi.getRecentPlansForUserAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getRecommendedDocumentPlansForUserAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((t,i)=>{const s=new r.k("GET_RECOMMENDED_DOCUMENT_PLANS_FOR_USER",this.taskServiceApi.getRecommendedDocumentPlansForUserAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(s,n,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getAllDocumentPlansForUserAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((t,i)=>{const s=new r.k("GET_ALL_DOCUMENT_PLANS_FOR_USER",this.taskServiceApi.getAllDocumentPlansForUserAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(s,n,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getContainersAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_CONTAINERS_OF_CONTAINER_TYPE"+e.containerType,this.taskServiceApi.getContainersAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getPlansForGroupAsync(e,t){const i=null==t?C.Q.Priority5:t;return new Promise((t,s)=>{const n=new r.k("GET_PLANS_FOR_GROUP"+e.groupId,this.taskServiceApi.getPlansForGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}resolveGroupsToPlansBatchedAsync(e,t,i){const s=N.g.validateAjaxClientRequestParameters(e,["groupIds"]);if(null!==s)return Promise.reject(s);const n=null==i?C.Q.Priority5:i;return new Promise((t,i)=>{const s=new r.k("RESOLVE_GROUPS_TO_PLANS_BATCHED",this.taskServiceApi.resolveGroupsToPlansBatchedAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(s,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,void 0)})}resolveContainerIdsToPlansBatchedAsync(e,t,i,s){const n=N.g.validateAjaxClientRequestParameters(e,["containerIds"]);if(null!==n)return Promise.reject(n);const a=null==s?C.Q.Priority5:s;return new Promise((s,n)=>{const o=new r.k("RESOLVE_CONTAINERS_TO_PLANS_BATCHED",this.taskServiceApi.resolveContainerIdsToPlansBatchedAsync.bind(this.taskServiceApi),e,{resolve:s,reject:n},[]);this.requestPrioritizer.handleRequest(o,a,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getPlanEntitySetAsync(e,t,i,s){const n=N.g.validateAjaxClientRequestParameters(e,["planId"]);if(null!==n)return Promise.reject(n);const a=null==s?C.Q.Priority5:s;return new Promise((s,n)=>{const o=new r.k("GET_PLAN_ENTITYSET"+e.planId,this.taskServiceApi.getPlanEntitySetAsync.bind(this.taskServiceApi),e,{resolve:s,reject:n},[]);this.requestPrioritizer.handleRequest(o,a,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getPlanEntitySetByExternalIdAsync(e,t,i,s){const n=N.g.validateAjaxClientRequestParameters(e,["contextScenarioId","externalObjectId"]);if(null!==n)return Promise.reject(n);const a=null==s?C.Q.Priority5:s;return new Promise((s,n)=>{const o=new r.k("GET_PLAN_ENTITYSET_EXTERNALID-S-".concat(e.contextScenarioId,"-I-").concat(e.externalObjectId),this.taskServiceApi.getPlanEntitySetByExternalIdAsync.bind(this.taskServiceApi),e,{resolve:s,reject:n},[]);this.requestPrioritizer.handleRequest(o,a,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getTaskEntitySetAsync(e,t,i,r){const n=null==r?C.Q.Priority5:r;return new Promise((r,a)=>{const o=new s(e.taskId,this.taskServiceApi.getTaskEntitySetAsync.bind(this.taskServiceApi),e,{resolve:r,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getTasksForPlanAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_TASKS_FOR_PLAN"+e.planId,this.taskServiceApi.getTasksForPlanAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getTasksAssignedToCurrentUserAsync(e,t,i){const s=null==i?C.Q.Priority5:i;return new Promise((i,n)=>{const a=new r.k("GET_TASKS_ASSIGNED_CURRENT_USER",this.taskServiceApi.getTasksAssignedToCurrentUserAsync.bind(this.taskServiceApi),e,{resolve:i,reject:n},[]);this.requestPrioritizer.handleRequest(a,s,this.duplicateRequestsComparator,this.duplicateRequestHandler,void 0,t)})}getBucketAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_BUCKET"+e.bucketId,this.taskServiceApi.getBucketAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getBucketsForPlanAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_BUCKETS_IN_PLAN"+e.planId,this.taskServiceApi.getBucketsForPlanAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getCurrentUserDetailsAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_CURRENT_USER_DETAILS",this.taskServiceApi.getCurrentUserDetailsAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getDiffSyncTokenAsync(e,t){const i=null==t?C.Q.Priority10:t;return new Promise((e,t)=>{const s=new r.k("GET_DIFF_SYNC_TOKEN",this.taskServiceApi.getDiffSyncTokenAsync.bind(this.taskServiceApi),void 0,{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(s,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getDiffSyncFeedAsync(e,t){const i=null==t?C.Q.Priority10:t;return new Promise((t,s)=>{const n=new r.k("GET_DIFF_SYNC_FEED"+e.diffSyncToken,this.taskServiceApi.getDiffSyncFeedAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getFilteredTenantUsersByKeyword(e,t){const i=N.g.validateAjaxClientRequestParameters(e,["keyword"]);if(null!==i)return Promise.reject(i);const s=null==t?C.Q.Priority1:t;return new Promise((t,i)=>{const n=new r.k("FILTERED_TENANT_USERS_BY_KEYWORD",this.taskServiceApi.getFilteredTenantUsersByKeyword.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,(e,t)=>e.entityId===t.entityId,(e,t)=>{const i=e.primaryRequest;return e.primaryRequest=t.primaryRequest,e.duplicateRequests.push(i),e})})}getSuiteNav(e,t){const i=null==t?C.Q.Priority5:t;return new Promise((t,s)=>{const n=new r.k("GET_SUITE_NAV"+e.culture,this.taskServiceApi.getSuiteNav.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getLicensesForUser(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_LICENSES_FOR_USER"+e.userId,this.taskServiceApi.getLicensesForUser.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getTenantGroupSettingsAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((e,t)=>{const s=new r.k("GET_TENANT_GROUP_SETTINGS",this.taskServiceApi.getTenantGroupSettingsAsync.bind(this.taskServiceApi),void 0,{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(s,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getSensitivityLabelsAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((e,t)=>{const s=new r.k("GET_SENSITIVITY_LABELS",this.taskServiceApi.getSensitivityLabelsAsync.bind(this.taskServiceApi),void 0,{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(s,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getSensitivityPolicySettingsAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((e,t)=>{const s=new r.k("GET_SENSITIVITY_POLICY_SETTINGS",this.taskServiceApi.getSensitivityPolicySettingsAsync.bind(this.taskServiceApi),void 0,{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(s,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getLatestBuild(e,t){const i=null==t?C.Q.Priority10:t;return new Promise((t,s)=>{const n=new r.k("GET_LATEST_BUILD",this.taskServiceApi.getLatestBuild.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getOperationStatusAsync(e,t){const i=null==t?C.Q.Priority5:t;return new Promise((t,s)=>{const n=new r.k("GET_OPERATION_STATUS",this.taskServiceApi.getOperationStatusAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getContainerPermissionsAsync(e,t){const i=null==t?C.Q.Priority5:t;return new Promise((t,s)=>{const n=new r.k("GET_CONTAINER_PERMISSIONS",this.taskServiceApi.getContainerPermissionsAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getTaskPermissionsAsync(e,t){const i=null==t?C.Q.Priority5:t;return new Promise((t,s)=>{const n=new r.k("GET_TASK_PERMISSIONS",this.taskServiceApi.getTaskPermissionsAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getUserRosterPlansAsync(e,t,i,s){const n=null==s?C.Q.Priority5:s;return new Promise((s,a)=>{const o=new r.k("GET_USER_ROSTER_PLANS",this.taskServiceApi.getUserRosterPlansAsync.bind(this.taskServiceApi),e,{resolve:s,reject:a},[]);this.requestPrioritizer.handleRequest(o,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,i)})}getFormResponseAsync(e,t){const i=null==t?C.Q.Priority5:t;return new Promise((t,s)=>{const n=new r.k("GET_FORM_RESPONSE",this.taskServiceApi.getFormResponseAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}getApprovalDetailsAsync(e,t){const i=null==t?C.Q.Priority5:t;return new Promise((t,s)=>{const n=new r.k("GET_APPROVAL_DETAILS",this.taskServiceApi.getApprovalDetailsAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i)})}deleteBucketAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new a(e.bucketId,this.taskServiceApi.deleteBucketAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}deletePlanAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new o(e.planId,this.taskServiceApi.deletePlanAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}deleteUnifiedGroupAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new u(e.groupId,this.taskServiceApi.deleteUnifiedGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}deleteTaskAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new c(e.taskId,this.taskServiceApi.deleteTaskAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}cancelUploadSession(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new n.b("CANCEL_UPLOAD"+e.uploadSession.id,this.taskServiceApi.cancelUploadSession.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}cancelApproval(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new n.b("CANCEL_APPROVAL",this.taskServiceApi.cancelApproval.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}createPlannerRosterAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new G("CREATE_PLANNER_ROSTER",this.taskServiceApi.createPlannerRosterAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}createGroupAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new d(e.unifiedGroupInfo.id,this.taskServiceApi.createGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[P.RequestPrefix+e.unifiedGroupInfo.id,u.RequestPrefix+e.unifiedGroupInfo.id,R.RequestPrefix+e.unifiedGroupInfo.id,q.RequestPrefix+e.unifiedGroupInfo.id,A.RequestPrefix+e.unifiedGroupInfo.id,S.RequestPrefix+e.unifiedGroupInfo.id]);this.requestPrioritizer.handleRequest(s,i)})}createPlanAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new v(e.newPlanEntitySet.id,this.taskServiceApi.createPlanAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[o.RequestPrefix+e.newPlanEntitySet.id,k.RequestPrefix+e.newPlanEntitySet.id]);this.requestPrioritizer.handleRequest(s,i)})}createApproval(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new l.E("CREATE_APPROVAL",this.taskServiceApi.createApproval.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}updateApproval(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new h.x("UPDATE_APPROVAL",this.taskServiceApi.updateApproval.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}copyPlanAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new m(e.planId,(e,t)=>this.taskServiceApi.copyPlanAsync(e,t),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}createBucketAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new E(e.bucketInfo.id,this.taskServiceApi.createBucketAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[T.RequestPrefix+e.bucketInfo.id,a.RequestPrefix+e.bucketInfo.id]);this.requestPrioritizer.handleRequest(s,i)})}createTaskAsync(e,t){var i,r;const n=null==t?C.Q.Priority1:t,a=[x.RequestPrefix+e.newTaskEntitySet.id,c.RequestPrefix+e.newTaskEntitySet.id,s.RequestPrefix+e.newTaskEntitySet.id],o=null!==(i=e.newTaskEntitySet.task.bucketId)&&void 0!==i?i:"";O.o.isPlexTempId(o)&&a.push(E.RequestPrefix+o);const u=null!==(r=e.newTaskEntitySet.task.planId)&&void 0!==r?r:"";return O.o.isPlexTempId(u)&&a.push(v.RequestPrefix+u),new Promise((t,i)=>{const r=new f(e.newTaskEntitySet.id,this.taskServiceApi.createTaskAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},a);this.requestPrioritizer.handleRequest(r,n)})}updateBucketAsync(e,t,i){const r=null==i?C.Q.Priority1:i;return new Promise((i,s)=>{const n=new T(e.originalBucket.id,this.taskServiceApi.updateBucketAsync.bind(this.taskServiceApi),e,{resolve:i,reject:s},[T.RequestPrefix+e.originalBucket.id,a.RequestPrefix+e.originalBucket.id]);this.requestPrioritizer.handleRequest(n,r,void 0,void 0,void 0,void 0,t)})}updatePlanAsync(e,t,i){const r=null==i?C.Q.Priority1:i,s=e.originalPlanEntitySet.id&&"";return new Promise((i,n)=>{const a=new k(s,this.taskServiceApi.updatePlanAsync.bind(this.taskServiceApi),e,{resolve:i,reject:n},[k.RequestPrefix+s,o.RequestPrefix+s]);this.requestPrioritizer.handleRequest(a,r,void 0,void 0,void 0,void 0,t)})}updateTaskAsync(e,t,i){var r,s,n,a;const o=null==i?C.Q.Priority1:i;let u="";null!=e.originalTaskEntitySet&&(u=e.originalTaskEntitySet.id);const l=[x.RequestPrefix+u,c.RequestPrefix+u],d=null!==(r=null===(s=e.updatedTaskEntitySet.task)||void 0===s?void 0:s.bucketId)&&void 0!==r?r:"";O.o.isPlexTempId(d)&&l.push(E.RequestPrefix+d);const p=null!==(n=null===(a=e.updatedTaskEntitySet.task)||void 0===a?void 0:a.planId)&&void 0!==n?n:"";return O.o.isPlexTempId(p)&&l.push(v.RequestPrefix+p),new Promise((i,r)=>{const s=new x(u,this.taskServiceApi.updateTaskAsync.bind(this.taskServiceApi),e,{resolve:i,reject:r},l);this.requestPrioritizer.handleRequest(s,o,void 0,void 0,void 0,void 0,t)})}undeleteTaskAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new _(e.taskId,this.taskServiceApi.undeleteTaskAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}updateUserDetailsAsync(e,t,i){const r=null==i?C.Q.Priority1:i;return new Promise((i,s)=>{const n=new g(e.originalUserDetails.id,this.taskServiceApi.updateUserDetailsAsync.bind(this.taskServiceApi),e,{resolve:i,reject:s},[g.RequestPrefix+e.originalUserDetails.id]);this.requestPrioritizer.handleRequest(n,r,void 0,void 0,void 0,void 0,t)})}updateUnifiedGroupAsync(e,t,i){const r=null==i?C.Q.Priority1:i;return new Promise((i,s)=>{const n=new P(e.originalGroup.id,this.taskServiceApi.updateUnifiedGroupAsync.bind(this.taskServiceApi),e,{resolve:i,reject:s},[P.RequestPrefix+e.originalGroup.id]);this.requestPrioritizer.handleRequest(n,r,void 0,void 0,void 0,void 0,t)})}addUserToContainer(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new h.x("ADD_USER_TO_CONTAINER"+e.container.externalId+e.userId,this.taskServiceApi.addUserToContainer.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}removeUserFromContainer(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new h.x("REMOVE_USER_FROM_CONTAINER"+e.container.externalId+e.userId,this.taskServiceApi.removeUserFromContainer.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}setRosterSensitivityLabelAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new h.x("SET_ROSTER_SENSITIVITY_LABLE"+e.rosterContainer,this.taskServiceApi.setRosterSensitivityLabelAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}createGroupConversationThreadAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new l.E("CREATE_CONV_THREAD"+e.groupId+e.newPost.id+e.threadSubject,this.taskServiceApi.createGroupConversationThreadAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}postReplyInGroupConversationThreadAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new l.E("REPLY_CONV_THREAD"+e.groupId+e.threadId,this.taskServiceApi.postReplyInGroupConversationThreadAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}joinGroupAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new A(e.groupId,this.taskServiceApi.joinGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}leaveGroupAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new S(e.groupId,this.taskServiceApi.leaveGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}createUploadSession(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new l.E("CREATE_UPLOAD"+e.groupId+e.itemPath,this.taskServiceApi.createUploadSession.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}uploadBytesToSession(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,r)=>{const s=new h.x("UPLOAD_BYTES"+e.uploadSession.id,this.taskServiceApi.uploadBytesToSession.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}validateGroupNamesAsync(e,t){const i=null==t?C.Q.Priority1:t;return new Promise((t,s)=>{const n=new r.k("VALIDATE_GROUP_NAMES",this.taskServiceApi.validateGroupNamesAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,(e,t)=>e.entityId===t.entityId,(e,t)=>{const i=e.primaryRequest;return e.primaryRequest=t.primaryRequest,e.duplicateRequests.push(i),e})})}trackExperimentEvent(e,t){const i=null==t?C.Q.Priority10:t;return new Promise((t,r)=>{const s=new h.x("TRACK_"+e.eventKey,this.taskServiceApi.trackExperimentEvent.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}logNotificationTelemetry(e,t){const i=null==t?C.Q.Priority10:t;return new Promise((t,r)=>{const s=new h.x("LOG_NOTIFICATION_TELEMETRY",this.taskServiceApi.logNotificationTelemetry.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(s,i)})}getAppContextSettings(e){const t=null==e?C.Q.Priority1:e;return new Promise((e,i)=>{const s=new r.k("GET_APP_CONTEXT_SETTINGS",this.taskServiceApi.getAppContextSettings.bind(this.taskServiceApi),void 0,{resolve:e,reject:i},[]);this.requestPrioritizer.handleRequest(s,t,this.duplicateRequestsComparator,this.duplicateRequestHandler)})}constructor(e,t){this.taskServiceApi=e,this.requestPrioritizer=t,this.duplicateRequestsComparator=(e,t)=>!(e.entityId!==t.entityId||e.requestType!==t.requestType||!U()(e.requestParams,t.requestParams)),this.duplicateRequestHandler=(e,t)=>(e.duplicateRequests.push(t.primaryRequest),null!=t.viewIds&&null!=e.viewIds?e.viewIds.push(...t.viewIds):e.viewIds=void 0,e)}}},39287:(e,t,i)=>{i.d(t,{k:()=>n});var r=i(38921),s=i(68552);class n extends s.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for PlannerReadRequest")}updateRequestParams(e,t){}constructor(e,t,i,r,n){super(e,t,i,r,s.Y.Update,n)}}},43649:(e,t,i)=>{i.d(t,{b:()=>a});var r=i(38921),s=i(68552);class n extends s.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for DeleteRequest")}constructor(e,t,i,r,n){super(e,t,i,r,s.Y.Delete,n)}}class a extends n{updateRequestParams(e,t){}constructor(e,t,i,r,s){super(e,t,i,r,s)}}},76241:(e,t,i)=>{var r;i.d(t,{X:()=>r}),function(e){e[e.Public=0]="Public",e[e.Private=1]="Private",e[e.HiddenMembership=2]="HiddenMembership"}(r||(r={}))},87596:(e,t,i)=>{i.d(t,{x:()=>s});var r=i(9575);class s extends r.z{updateRequestParams(e,t){}constructor(e,t,i,r,s){super(e,t,i,r,s)}}},88636:(e,t,i)=>{i.d(t,{E:()=>n});var r=i(68552);class s extends r.K{constructor(e,t,i,s,n){super(e,t,i,s,r.Y.Create,n)}}class n extends s{extractNewEntityId(e){return""}updateRequestParams(e,t){}constructor(e,t,i,r,s){super(e,t,i,r,s)}}}}]);
//# sourceMappingURL=gatedtsapi.63dfef99.chunk.js.map