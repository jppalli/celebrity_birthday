"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[36818],{8403:(e,t,i)=>{i.d(t,{f:()=>b});var r=i(55491),n=i.n(r),o=i(42410),a=i(72761);class s{static fromResource(e){return new s(e.contextScenarioId,e.externalContextId,e.externalObjectId,e.ownerAppId)}toGraphSerializable(){return{contextScenarioId:this.contextScenarioId,externalContextId:this.externalContextId,externalObjectId:this.externalObjectId,ownerAppId:this.ownerAppId}}constructor(e,t,i,r){this.externalObjectId=i,this.externalContextId=t,this.contextScenarioId=e,this.ownerAppId=r}}class l{toGraphSerializable(){const e={};return this.external&&(e.external=this.external.toGraphSerializable()),e}constructor(e){null!=e.external&&(this.external=s.fromResource(e.external))}}var c=i(41740),d=i.n(c),h=i(91246);class u{build(){return new b(this)}newFromDifferentialUpdate(e){if(e.entityType!==a.I.Bucket)throw new Error("ArgumentException: invalid entity");const t=b.builder.withPropertyBag({id:e.id,itemVersion:e.itemVersion,planId:"",title:""}).build(),i=e.getCreateDiffData(),r=t.applyDiffs(i);return this.forClone(r)}forClone(e){var t;return this.withPropertyBag({id:e.id,itemVersion:e.itemVersion,title:e.title,planId:e.planId,orderHint:e.orderHint,creationSource:null!==(t=d()(e.creationSource))&&void 0!==t?t:new l({})})}fromWebResource(e){return this.withPropertyBag({id:e.Id,itemVersion:null!=e.ItemVersion?e.ItemVersion.toString():void 0,orderHint:e.OrderHint,planId:e.PlanId,title:e.Title,creationSource:e.creationSource?new l(e.creationSource):void 0})}fromGraphResource(e){return this.withPropertyBag({itemVersion:e["@odata.etag"],title:e.name,planId:e.planId||"",orderHint:e.orderHint,id:e.id,creationSource:e.creationSource?new l(e.creationSource):void 0})}withPropertyBag(e){return this.id=e.id,this.itemVersion=e.itemVersion||this.itemVersion,this.orderHint=e.orderHint||this.orderHint,this.planId=e.planId,this.title=e.title,this.creationSource=e.creationSource||this.creationSource,this}withLocallyUniqueId(){return this.id=h.o.generate(),this}getDiffDataFromWebResource(e,t){const i=new o.F;i.addMapping("Title","title"),i.addMapping("OrderHint","orderHint"),i.addMapping("PlanId","planId"),i.addMapping("creationSource","creationSource");const r={};return n()(e.Changes,e=>{const t=e.FieldName;switch(t){case"OrderHint":case"PlanId":case"Title":const n=i.getMappedClientKey(t);r[n]=i.translateValue(t,n,e.Value)}}),r}getDiffDataFromGraphResource(e,t){const i=new o.F;return i.addMapping("name","title"),i.addMapping("orderHint","orderHint"),i.addMapping("planId","planId"),i.addMapping("creationSource","creationSource"),i.translate(e)}withValidData(){return this.id=h.o.generate(),this.itemVersion="1",this.title="Test bucket",this.planId=h.o.generate(),this.orderHint=" !",this}constructor(){this.id=h.o.generate(),this.title="",this.planId=h.o.generate(),this.itemVersion="",this.orderHint=" !",this.creationSource=new l({})}}var p=i(88908),g=i(17002),f=i.n(g),I=i(54320),m=i.n(I),y=i(36777),w=i.n(y),S=i(679);class b extends p.W{static get builder(){return new u}get entityType(){return a.I.Bucket}toWebSerializable(){return{Id:this.id,ItemVersion:null!=this.itemVersion?parseInt(this.itemVersion,10):null,OrderHint:this.orderHint,PlanId:this.planId,Title:this.title,creationSource:this.creationSource.toGraphSerializable()}}toGraphSerializable(){const e=this.creationSource.toGraphSerializable();return{id:this.id,"@odata.etag":this.itemVersion,orderHint:this.orderHint,planId:this.planId,name:this.title,creationSource:m()(e)?void 0:e}}setProperty(e,t){if("id"===e||"itemVersion"===e||"planId"===e||"creationSource"===e)throw new Error("ReadOnlyException: "+e);const i=this.getClone();return i[e]=t,i}getDiff(e){return S.B.getDiff(this,e,S.B.getDiffMomentCustomizer)}applyDiffs(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];if(!f()(t,e=>null!=e))throw new Error("ArgumentException: diffs - Diffs array contains null elements");return t.length>0?w()(b.builder.build(),this,...t,S.B.applyDiffMomentCustomizer):this}applyDifferentialUpdate(e){if(e.id!==this.id)throw new Error("ArgumentException: update.id must match this.id");const t=e.getUpdateDiffData(this);return this.applyDiffs(t)}getClone(){return this.getCloneBuilder().build()}getCloneBuilder(){return b.builder.forClone(this)}constructor(e){super(e.id,e.itemVersion),this.orderHint=e.orderHint,this.planId=e.planId,this.title=e.title,this.creationSource=e.creationSource}}b.TitleMaxLength=256},29106:(e,t,i)=>{i.r(t),i.d(t,{TasksByPlanViewActionCreator:()=>f});var r=i(38752),n=i(74844),o=i(95783),a=i(64226),s=i(96891),l=i(36591),c=i(8403),d=i(65818),h=i(44430),u=i(98424),p=i(86053),g=i(82841);class f extends l.C{get name(){return s.M.TasksByPlanViewActionCreator}async fetchViewData(e){let t,i,s;this.loggers.traceLogger.logTrace(507880066,n.k.Verbose,"TasksByPlan View - Fetching view data [PlanId=".concat(e,"]"));try{[t,i,s]=await Promise.all([this.logicModuleProviders.bucketModule(),this.logicModuleProviders.planModule(),this.logicModuleProviders.taskModule()])}catch(y){return void this.loggers.traceLogger.logTrace(507880065,n.k.Error,"TasksByPlan View - Failed to dynamically import modules [Error=".concat(y,"]"))}const l=i.fetchPlanAsync(e),f=t.fetchBucketsForPlanAsync(e),I=s.fetchPlanTasksAsync(e,!0),m=await this.logicModuleProviders.notificationModule();Promise.all([l,f,I]).then(async i=>{const[o,s,l]=i,f=l.data.Results;if(0===s.length){const i=c.f.builder.withPropertyBag({id:"",title:p.p.Strings.SharedComponents_DefaultBucketName,planId:e,orderHint:u.O.generateOrderHintBetween(null,null)}).withLocallyUniqueId().build();t.createBucketAsync(i)}const{containerType:I,externalId:y}=o.plan.container,[w,S]=await Promise.all([this.logicModuleProviders.containerModule(),this.logicModuleProviders.userModule()]);if(w.fetchContainer(o.plan.container,!0).then(async e=>{if(I===d.K.Group||I===d.K.Roster){if(!r.B.isUnoContext){(await this.logicModuleProviders.tenantModule()).fetchTenantGroupSettingsAsync().then(t=>{t.enableMIPLabels&&(S.fetchUserAccessibleSensitivityLabelsAsync().catch(()=>{}),S.fetchUserAccessibleSensitivityPolicySettingsAsync().catch(()=>{}),I===d.K.Group&&w.fetchUnifiedGroupAsync(e.externalId).then(()=>{w.fetchGroupSensitivityLabelAsync(e.externalId).catch(()=>{})}).catch(()=>{}))}).catch(()=>{})}if(I===d.K.Group){var t;const i=e;i.unifiedGroupDetails&&!i.unifiedGroupDetails.isFullyProvisioned()&&w.pollForGroupFullyProvisioned(i.unifiedGroupDetails);(null===(t=i.unifiedGroupDetails)||void 0===t?void 0:t.currentUserRelationToGroup)===h.N.NonMember&&m.showInfoInternal(a.fc.NonMemberInfo)}}}).catch(()=>{}),I===d.K.DriveItem){const e=[];f.forEach(t=>{t.task.getReferencedUserIds().forEach(t=>{-1===e.indexOf(t)&&e.push(t)})}),S.fetchUsersAsync(e).catch(()=>{})}else S.fetchUsersForContainerAsync(o.plan.container).catch(()=>{});if(I===d.K.DriveItem){(await this.logicModuleProviders.driveItemModule()).fetchDriveItem(y).catch(e=>{this.loggers.traceLogger.logTrace(507880064,n.k.Warning,"Get Drive Item Failure ".concat((0,g.s8)(e)))})}if(null!=o.plan.sharedWithContainers)for(const e of o.plan.sharedWithContainers)if(e.containerType===d.K.DriveItem){(await this.logicModuleProviders.driveItemModule()).fetchDriveItem(e.externalId).catch(()=>{})}}).catch(t=>{this.loggers.traceLogger.logTrace(507880035,n.k.Warning,"Loading plan failure: ".concat((0,g.s8)(t))),m.handleRequestFailures(t,[o.t3.Forbidden],[o.t3.NotFound],a.fc.LoadingPlanDataError,e)})}async onCriticalDataFetchCompletion(e){this.loggers.traceLogger.logTrace(507880034,n.k.Info,"TasksByPlan view critical data fetch completed [PlanId=".concat(e,"]"));(await this.logicModuleProviders.planModule()).subscribeUserToPlanAsync(this.entityStoreSet.appContextStore.getCurrentUserId(),e).catch(()=>{})}constructor(e,t,i,n){super(e,t,i,r.B.clientSettings,n)}}},36591:(e,t,i)=>{i.d(t,{C:()=>r});class r{constructor(e,t,i,r,n){this.dispatcher=e,this.logicModuleProviders=t,this.entityStoreSet=i,this.clientSettings=r,this.loggers=n}}},44430:(e,t,i)=>{var r;i.d(t,{N:()=>r}),function(e){e[e.NonMember=0]="NonMember",e[e.Member=1]="Member",e[e.Owner=2]="Owner"}(r||(r={}))}}]);
//# sourceMappingURL=tasksbyplanviewac.d8a0f0d2.chunk.js.map